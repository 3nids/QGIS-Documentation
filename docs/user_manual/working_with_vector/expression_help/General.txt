.. _expression_function_General_env:

env
...

.. list-table::
   :widths: 15 85
   :stub-columns: 1

   * - Description
     - Gets an environment variable and returns its content as a string. If the variable is not found, `NULL` will be returned. This is handy to inject system specific configuration like drive letters or path prefixes. Definition of environment variables depends on the operating system, please check with your system administrator or the operating system documentation how this can be set.
   * - Syntax
     - env(name)

   * - Arguments
     - **name** - The name of the environment variable which should be retrieved.

   * - Examples
     - ``env( 'LANG' )`` → 'en_US.UTF-8'

       ``env( 'MY_OWN_PREFIX_VAR' )`` → 'Z:'

       ``env( 'I_DO_NOT_EXIST' )`` → NULL


.. _expression_function_General_eval:

eval
....

.. list-table::
   :widths: 15 85
   :stub-columns: 1

   * - Description
     - Evaluates an expression which is passed in a string. Useful to expand dynamic parameters passed as context variables or fields.
   * - Syntax
     - eval(expression)

   * - Arguments
     - **expression** - an expression string

   * - Examples
     - ``eval('\'nice\'')`` → 'nice'

       ``eval(@expression_var)`` → [whatever the result of evaluating @expression_var might be…]


.. _expression_function_General_eval_template:

eval_template
.............

.. list-table::
   :widths: 15 85
   :stub-columns: 1

   * - Description
     - Evaluates a template which is passed in a string. Useful to expand dynamic parameters passed as context variables or fields.
   * - Syntax
     - eval_template(template)

   * - Arguments
     - **template** - a template string

   * - Examples
     - ``eval_template('QGIS [% upper(\\'rocks\\') %]')`` → QGIS ROCKS


.. _expression_function_General_is_layer_visible:

is_layer_visible
................

.. list-table::
   :widths: 15 85
   :stub-columns: 1

   * - Description
     - Returns true if a specified layer is visible.
   * - Syntax
     - is_layer_visible(layer)

   * - Arguments
     - **layer** - a string, representing either a layer name or layer ID

   * - Examples
     - ``is_layer_visible('baseraster')`` → True


.. _expression_function_General_layer_property:

layer_property
..............

.. list-table::
   :widths: 15 85
   :stub-columns: 1

   * - Description
     - Returns a matching layer property or metadata value.
   * - Syntax
     - layer_property(layer, property)

   * - Arguments
     - **layer** - a string, representing either a layer name or layer ID

       **property** - a string corresponding to the property to return. Valid options are:<br /><ul><li>name: layer name</li><li>id: layer ID</li><li>title: metadata title string</li><li>abstract: metadata abstract string</li><li>keywords: metadata keywords</li><li>data_url: metadata URL</li><li>attribution: metadata attribution string</li><li>attribution_url: metadata attribution URL</li><li>source: layer source</li><li>min_scale: minimum display scale for layer</li><li>max_scale: maximum display scale for layer</li><li>is_editable: if layer is in edit mode</li><li>crs: layer CRS</li><li>crs_definition: layer CRS full definition</li><li>crs_description: layer CRS description</li><li>extent: layer extent (as a geometry object)</li><li>distance_units: layer distance units</li><li>type: layer type, e.g., Vector or Raster</li><li>storage_type: storage format (vector layers only)</li><li>geometry_type: geometry type, e.g., Point (vector layers only)</li><li>feature_count: approximate feature count for layer (vector layers only)</li><li>path: File path to the layer data source. Only available for file based layers.</li></ul>

   * - Examples
     - ``layer_property('streets','title')`` → 'Basemap Streets'

       ``layer_property('airports','feature_count')`` → 120

       ``layer_property('landsat','crs')`` → 'EPSG:4326'


.. _expression_function_General_var:

var
...

.. list-table::
   :widths: 15 85
   :stub-columns: 1

   * - Description
     - Returns the value stored within a specified variable.
   * - Syntax
     - var(name)

   * - Arguments
     - **name** - a variable name

   * - Examples
     - ``var('qgis_version')`` → '2.12'


.. _expression_function_General_with_variable:

with_variable
.............

.. list-table::
   :widths: 15 85
   :stub-columns: 1

   * - Description
     - This function sets a variable for any expression code that will be provided as 3rd argument. This is only useful for complicated expressions, where the same calculated value needs to be used in different places.
   * - Syntax
     - with_variable(name, value, expression)

   * - Arguments
     - **name** - the name of the variable to set

       **value** - the value to set

       **expression** - the expression for which the variable will be available

   * - Examples
     - ``with_variable('my_sum', 1 + 2 + 3, @my_sum * 2 + @my_sum * 5)`` → 42


