.. _expression_function_abs:

abs
...

abs(value)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

* - Description
  - Returns the absolute value of a number.

  - Arguments
  - **value** - a number

  - Examples
  - ``abs(-2)`` → 2

.. _expression_function_acos:

acos
....

acos(value)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

* - Description
  - Returns the inverse cosine of a value in radians.

  - Arguments
  - **value** - cosine of an angle in radians

  - Examples
  - ``acos(0.5)`` → 1.0471975511966

.. _expression_function_asin:

asin
....

asin(value)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

* - Description
  - Returns the inverse sine of a value in radians.

  - Arguments
  - **value** - sine of an angle in radians

  - Examples
  - ``asin(1.0)`` → 1.5707963267949

.. _expression_function_atan:

atan
....

atan(value)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

* - Description
  - Returns the inverse tangent of a value in radians.

  - Arguments
  - **value** - tan of an angle in radians

  - Examples
  - ``atan(0.5)`` → 0.463647609000806

.. _expression_function_atan2:

atan2
.....

atan2(dy, dx)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

* - Description
  - Returns the inverse tangent of dy/dx by using the signs of the two arguments to determine the quadrant of the result.

  - Arguments
  - **dy** - y coordinate difference
    **dx** - x coordinate difference

  - Examples
  - ``atan2(1.0, 1.732)`` → 0.523611477769969

.. _expression_function_azimuth:

azimuth
.......

azimuth(point_a, point_b)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

* - Description
  - Returns the north-based azimuth as the angle in radians measured clockwise from the vertical on point_a to point_b.

  - Arguments
  - **point_a** - point geometry
    **point_b** - point geometry

  - Examples
  - ``degrees( azimuth( make_point(25, 45), make_point(75, 100) ) )`` → 42.273689
    ``degrees( azimuth( make_point(75, 100), make_point(25,45) ) )`` → 222.273689

.. _expression_function_ceil:

ceil
....

ceil(value)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

* - Description
  - Rounds a number upwards.

  - Arguments
  - **value** - a number

  - Examples
  - ``ceil(4.9)`` → 5
    ``ceil(-4.9)`` → -4

.. _expression_function_clamp:

clamp
.....

clamp(minimum, input, maximum)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

* - Description
  - Restricts an input value to a specified range.

  - Arguments
  - **minimum** - the smallest value <i>input</i> is allowed to take.
    **input** - a value which will be restricted to the range specified by <i>minimum</i> and <i>maximum</i>
    **maximum** - the largest value <i>input</i> is allowed to take

  - Examples
  - ``clamp(1,5,10)`` → 5
    ``clamp(1,0,10)`` → 1
    ``clamp(1,11,10)`` → 10

.. _expression_function_cos:

cos
...

cos(angle)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

* - Description
  - Returns cosine of an angle.

  - Arguments
  - **angle** - angle in radians

  - Examples
  - ``cos(1.571)`` → 0.000796326710733263

.. _expression_function_degrees:

degrees
.......

degrees(radians)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

* - Description
  - Converts from radians to degrees.

  - Arguments
  - **radians** - numeric value

  - Examples
  - ``degrees(3.14159)`` → 180
    ``degrees(1)`` → 57.2958

.. _expression_function_exp:

exp
...

exp(value)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

* - Description
  - Returns exponential of an value.

  - Arguments
  - **value** - number to return exponent of

  - Examples
  - ``exp(1.0)`` → 2.71828182845905

.. _expression_function_floor:

floor
.....

floor(value)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

* - Description
  - Rounds a number downwards.

  - Arguments
  - **value** - a number

  - Examples
  - ``floor(4.9)`` → 4
    ``floor(-4.9)`` → -5

.. _expression_function_inclination:

inclination
...........

inclination(point_a, point_b)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

* - Description
  - Returns the inclination measured from the zenith (0) to the nadir (180) on point_a to point_b.

  - Arguments
  - **point_a** - point geometry
    **point_b** - point geometry

  - Examples
  - ``inclination( make_point( 5, 10, 0 ), make_point( 5, 10, 5 ) )`` → 0.0
    ``inclination( make_point( 5, 10, 0 ), make_point( 5, 10, 0 ) )`` → 90.0
    ``inclination( make_point( 5, 10, 0 ), make_point( 50, 100, 0 ) )`` → 90.0
    ``inclination( make_point( 5, 10, 0 ), make_point( 5, 10, -5 ) )`` → 180.0

.. _expression_function_ln:

ln
..

ln(value)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

* - Description
  - Returns the natural logarithm of a value.

  - Arguments
  - **value** - numeric value

  - Examples
  - ``ln(1)`` → 0
    ``ln(2.7182818284590452354)`` → 1

.. _expression_function_log:

log
...

log(base, value)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

* - Description
  - Returns the value of the logarithm of the passed value and base.

  - Arguments
  - **base** - any positive number
    **value** - any positive number

  - Examples
  - ``log(2, 32)`` → 5
    ``log(0.5, 32)`` → -5

.. _expression_function_log10:

log10
.....

log10(value)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

* - Description
  - Returns the value of the base 10 logarithm of the passed expression.

  - Arguments
  - **value** - any positive number

  - Examples
  - ``log10(1)`` → 0
    ``log10(100)`` → 2

.. _expression_function_max:

max
...

max(value1, value2, ...)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

* - Description
  - Returns the largest value in a set of values.

  - Arguments
  - **value** - a number

  - Examples
  - ``max(2,10.2,5.5)`` → 10.2
    ``max(20.5,NULL,6.2)`` → 20.5

.. _expression_function_min:

min
...

min(value1, value2, ...)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

* - Description
  - Returns the smallest value in a set of values.

  - Arguments
  - **value** - a number

  - Examples
  - ``min(20.5,10,6.2)`` → 6.2
    ``min(2,-10.3,NULL)`` → -10.3

.. _expression_function_pi:

pi
..

pi

.. list-table::
   :widths: 15 85
   :stub-columns: 1

* - Description
  - Returns value of pi for calculations.

  - Examples
  - ``pi()`` → 3.14159265358979

.. _expression_function_radians:

radians
.......

radians(degrees)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

* - Description
  - Converts from degrees to radians.

  - Arguments
  - **degrees** - numeric value

  - Examples
  - ``radians(180)`` → 3.14159
    ``radians(57.2958)`` → 1

.. _expression_function_rand:

rand
....

rand(min, max, seed)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

* - Description
  - Returns a random integer within the range specified by the minimum and maximum argument (inclusive). If a seed is provided, the returned will always be the same, depending on the seed.

  - Arguments
  - **min** - an integer representing the smallest possible random number desired
    **max** - an integer representing the largest possible random number desired
    **seed** - any value to use as seed

  - Examples
  - ``rand(1, 10)`` → 8

.. _expression_function_randf:

randf
.....

randf(min, max, seed)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

* - Description
  - Returns a random float within the range specified by the minimum and maximum argument (inclusive). If a seed is provided, the returned will always be the same, depending on the seed.

  - Arguments
  - **min** - an float representing the smallest possible random number desired
    **max** - an float representing the largest possible random number desired
    **seed** - any value to use as seed

  - Examples
  - ``randf(1, 10)`` → 4.59258286403147

.. _expression_function_round:

round
.....

round(value, places)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

* - Description
  - Rounds a number to number of decimal places.

  - Arguments
  - **value** - decimal number to be rounded
    **places** - Optional integer representing number of places to round decimals to. Can be negative.

  - Examples
  - ``round(1234.567, 2)`` → 1234.57
    ``round(1234.567)`` → 1235

.. _expression_function_scale_exp:

scale_exp
.........

scale_exp(val, domain_min, domain_max, range_min, range_max, exponent)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

* - Description
  - Transforms a given value from an input domain to an output range using an exponential curve. This function can be used to ease values in or out of the specified output range.

  - Arguments
  - **val** - A value in the input domain. The function will return a corresponding scaled value in the output range.
    **domain_min** - Specifies the minimum value in the input domain, the smallest value the input value should take.
    **domain_max** - Specifies the maximum value in the input domain, the largest value the input value should take.
    **range_min** - Specifies the minimum value in the output range, the smallest value which should be output by the function.
    **range_max** - Specifies the maximum value in the output range, the largest value which should be output by the function.
    **exponent** - A positive value (greater than 0), which dictates the way input values are mapped to the output range. Large exponents will cause the output values to 'ease in', starting slowly before accelerating as the input values approach the domain maximum. Smaller exponents (less than 1) will cause output values to 'ease out', where the mapping starts quickly but slows as it approaches the domain maximum.

  - Examples
  - ``scale_exp(5,0,10,0,100,2)`` → 25
    ``scale_exp(3,0,10,0,100,0.5)`` → 54.772

.. _expression_function_scale_linear:

scale_linear
............

scale_linear(val, domain_min, domain_max, range_min, range_max)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

* - Description
  - Transforms a given value from an input domain to an output range using linear interpolation.

  - Arguments
  - **val** - A value in the input domain. The function will return a corresponding scaled value in the output range.
    **domain_min** - Specifies the minimum value in the input domain, the smallest value the input value should take.
    **domain_max** - Specifies the maximum value in the input domain, the largest value the input value should take.
    **range_min** - Specifies the minimum value in the output range, the smallest value which should be output by the function.
    **range_max** - Specifies the maximum value in the output range, the largest value which should be output by the function.

  - Examples
  - ``scale_linear(5,0,10,0,100)`` → 50
    ``scale_linear(0.2,0,1,0,360)`` → 72
    ``scale_linear(1500,1000,10000,9,20)`` → 9.6111111

.. _expression_function_sin:

sin
...

sin(angle)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

* - Description
  - Returns the sine of an angle.

  - Arguments
  - **angle** - angle in radians

  - Examples
  - ``sin(1.571)`` → 0.999999682931835

.. _expression_function_sqrt:

sqrt
....

sqrt(value)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

* - Description
  - Returns square root of a value.

  - Arguments
  - **value** - a number

  - Examples
  - ``sqrt(9)`` → 3

.. _expression_function_tan:

tan
...

tan(angle)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

* - Description
  - Returns the tangent of an angle.

  - Arguments
  - **angle** - angle in radians

  - Examples
  - ``tan(1.0)`` → 1.5574077246549

