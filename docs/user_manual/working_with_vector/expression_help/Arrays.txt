.. _expression_function_array:

array
.....

array(value1, value2, ...)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

   * - Description
     - Returns an array containing all the values passed as parameter.

   * - Arguments
     - **value** - a value

   * - Examples
     - ``array(2,10)`` → [ 2, 10 ]


.. _expression_function_array_all:

array_all
.........

array_all(array_a, array_b)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

   * - Description
     - Returns true if an array contains all the values of a given array.

   * - Arguments
     - **array_a** - an array

       **array_b** - the array of values to search

   * - Examples
     - ``array_all(array(1,2,3),array(2,3))`` → true

       ``array_all(array(1,2,3),array(1,2,4))`` → false


.. _expression_function_array_append:

array_append
............

array_append(array, value)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

   * - Description
     - Returns an array with the given value added at the end.

   * - Arguments
     - **array** - an array

       **value** - the value to add

   * - Examples
     - ``array_append(array(1,2,3),4)`` → [ 1, 2, 3, 4 ]


.. _expression_function_array_cat:

array_cat
.........

array_cat(array1, array2, ...)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

   * - Description
     - Returns an array containing all the given arrays concatenated.

   * - Arguments
     - **array** - an array

   * - Examples
     - ``array_cat(array(1,2),array(2,3))`` → [ 1, 2, 2, 3 ]


.. _expression_function_array_contains:

array_contains
..............

array_contains(array, value)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

   * - Description
     - Returns true if an array contains the given value.

   * - Arguments
     - **array** - an array

       **value** - the value to search

   * - Examples
     - ``array_contains(array(1,2,3),2)`` → true


.. _expression_function_array_distinct:

array_distinct
..............

array_distinct(array)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

   * - Description
     - Returns an array containing distinct values of the given array.

   * - Arguments
     - **array** - an array

   * - Examples
     - ``array_distinct(array(1,2,3,2,1))`` → [ 1, 2, 3 ]


.. _expression_function_array_filter:

array_filter
............

array_filter(array, expression)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

   * - Description
     - Returns an array with only the items for which the expression evaluates to true.

   * - Arguments
     - **array** - an array

       **expression** - an expression to evaluate on each item. The variable `@element` will be replaced by the current value.

   * - Examples
     - ``array_filter(array(1,2,3),@element &lt; 3)`` → [ 1, 2 ]


.. _expression_function_array_find:

array_find
..........

array_find(array, value)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

   * - Description
     - Returns the index (0 for the first one) of a value within an array. Returns -1 if the value is not found.

   * - Arguments
     - **array** - an array

       **value** - the value to search

   * - Examples
     - ``array_find(array(1,2,3),2)`` → 1


.. _expression_function_array_first:

array_first
...........

array_first(array)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

   * - Description
     - Returns the first value of an array.

   * - Arguments
     - **array** - an array

   * - Examples
     - ``array_first(array('a','b','c'))`` → 'a'


.. _expression_function_array_foreach:

array_foreach
.............

array_foreach(array, expression)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

   * - Description
     - Returns an array with the given expression evaluated on each item.

   * - Arguments
     - **array** - an array

       **expression** - an expression to evaluate on each item. The variable `@element` will be replaced by the current value.

   * - Examples
     - ``array_foreach(array('a','b','c'),upper(@element))`` → [ 'A', 'B', 'C' ]

       ``array_foreach(array(1,2,3),@element + 10)`` → [ 11, 12, 13 ]


.. _expression_function_array_get:

array_get
.........

array_get(array, index)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

   * - Description
     - Returns the Nth value (0 for the first one) of an array.

   * - Arguments
     - **array** - an array

       **index** - the index to get (0 based)

   * - Examples
     - ``array_get(array('a','b','c'),1)`` → 'b'


.. _expression_function_array_insert:

array_insert
............

array_insert(array, pos, value)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

   * - Description
     - Returns an array with the given value added at the given position.

   * - Arguments
     - **array** - an array

       **pos** - the position where to add (0 based)

       **value** - the value to add

   * - Examples
     - ``array_insert(array(1,2,3),1,100)`` → [ 1, 100, 2, 3 ]


.. _expression_function_array_intersect:

array_intersect
...............

array_intersect(array1, array2)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

   * - Description
     - Returns true if at least one element of array1 exists in array2.

   * - Arguments
     - **array1** - an array

       **array2** - another array

   * - Examples
     - ``array_intersect(array(1,2,3,4),array(4,0,2,5))`` → true


.. _expression_function_array_last:

array_last
..........

array_last(array)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

   * - Description
     - Returns the last value of an array.

   * - Arguments
     - **array** - an array

   * - Examples
     - ``array_last(array('a','b','c'))`` → 'c'


.. _expression_function_array_length:

array_length
............

array_length(array)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

   * - Description
     - Returns the number of elements of an array.

   * - Arguments
     - **array** - an array

   * - Examples
     - ``array_length(array(1,2,3))`` → 3


.. _expression_function_array_prepend:

array_prepend
.............

array_prepend(array, value)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

   * - Description
     - Returns an array with the given value added at the beginning.

   * - Arguments
     - **array** - an array

       **value** - the value to add

   * - Examples
     - ``array_prepend(array(1,2,3),0)`` → [ 0, 1, 2, 3 ]


.. _expression_function_array_remove_all:

array_remove_all
................

array_remove_all(array, value)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

   * - Description
     - Returns an array with all the entries of the given value removed.

   * - Arguments
     - **array** - an array

       **value** - the values to remove

   * - Examples
     - ``array_remove_all(array('a','b','c','b'),'b')`` → [ 'a', 'c' ]


.. _expression_function_array_remove_at:

array_remove_at
...............

array_remove_at(array, pos)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

   * - Description
     - Returns an array with the given index removed.

   * - Arguments
     - **array** - an array

       **pos** - the position to remove (0 based)

   * - Examples
     - ``array_remove_at(array(1,2,3),1)`` → [ 1, 3 ]


.. _expression_function_array_reverse:

array_reverse
.............

array_reverse(array)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

   * - Description
     - Returns the given array with array values in reversed order.

   * - Arguments
     - **array** - an array

   * - Examples
     - ``array_reverse(array(2,4,0,10))`` → [ 10, 0, 4, 2 ]


.. _expression_function_array_slice:

array_slice
...........

array_slice(array, start_pos, end_pos)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

   * - Description
     - Returns a portion of the array. The slice is defined by the start_pos and end_pos arguments.

   * - Arguments
     - **array** - an array

       **start_pos** - the index of the start position of the slice (0 based). The start_pos index is included in the slice. If you use a negative start_pos, the index is counted from the end of the list (-1 based).

       **end_pos** - the index of the end position of the slice (0 based). The end_pos index is included in the slice. If you use a negative end_pos, the index is counted from the end of the list (-1 based).

   * - Examples
     - ``array_slice(array(1,2,3,4,5),0,3)`` → [ 1, 2, 3, 4 ]

       ``array_slice(array(1,2,3,4,5),0,-1)`` → [ 1, 2, 3, 4, 5 ]

       ``array_slice(array(1,2,3,4,5),-5,-1)`` → [ 1, 2, 3, 4, 5 ]

       ``array_slice(array(1,2,3,4,5),0,0)`` → [ 1 ]

       ``array_slice(array(1,2,3,4,5),-2,-1)`` → [ 4, 5 ]

       ``array_slice(array(1,2,3,4,5),-1,-1)`` → [ 5 ]

       ``array_slice(array('Dufour','Valmiera','Chugiak','Brighton'),1,2)`` → [ 'Valmiera', 'Chugiak' ]

       ``array_slice(array_slice(array('Dufour','Valmiera','Chugiak','Brighton'),-2,-1)`` → [ 'Chugiak', 'Brighton' ]


.. _expression_function_array_sort:

array_sort
..........

array_sort(array, ascending)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

   * - Description
     - Returns the provided array with its elements sorted.

   * - Arguments
     - **array** - an array

       **ascending** - set this parameter to false to sort the array in descending order

   * - Examples
     - ``array_sort(array(3,2,1))`` → [ 1, 2, 3 ]


.. _expression_function_array_to_string:

array_to_string
...............

array_to_string(array, delimiter, empty_value)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

   * - Description
     - Concatenates array elements into a string separated by a delimiter and using optional string for empty values.

   * - Arguments
     - **array** - the input array

       **delimiter** - the string delimiter used to separate concatenated array elements

       **empty_value** - the optional string to use as replacement for empty (zero length) matches

   * - Examples
     - ``array_to_string(array('1','2','3'))`` → '1,2,3'

       ``array_to_string(array(1,2,3),'-')`` → '1-2-3'

       ``array_to_string(array('1','','3'),',','0')`` → '1,0,3'


.. _expression_function_generate_series:

generate_series
...............

generate_series(start, stop, step)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

   * - Description
     - Creates an array containing a sequence of numbers.

   * - Arguments
     - **start** - first value of the sequence

       **stop** - value that ends the sequence once reached

       **step** - value used as the increment between values

   * - Examples
     - ``generate_series(1,5)`` → [ 1, 2, 3, 4, 5 ]

       ``generate_series(5,1,-1)`` → [ 5, 4, 3, 2, 1 ]


.. _expression_function_regexp_matches:

regexp_matches
..............

regexp_matches(string, regex, empty_value)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

   * - Description
     - Returns an array of all strings captured by capturing groups, in the order the groups themselves appear in the supplied regular expression against a string.

   * - Arguments
     - **string** - the string to capture groups from against the regular expression

       **regex** - the regular expression used to capture groups

       **empty_value** - the optional string to use as replacement for empty (zero length) matches

   * - Examples
     - ``regexp_matches('QGIS=>rocks','(.*)=>(.*)')`` → [ 'QGIS', 'rocks' ]

       ``regexp_matches('key=>','(.*)=>(.*)','empty value')`` → [ 'key', 'empty value' ]


.. _expression_function_string_to_array:

string_to_array
...............

string_to_array(string, delimiter, empty_value)

.. list-table::
   :widths: 15 85
   :stub-columns: 1

   * - Description
     - Splits string into an array using supplied delimiter and optional string for empty values.

   * - Arguments
     - **string** - the input string

       **delimiter** - the string delimiter used to split the input string

       **empty_value** - the optional string to use as replacement for empty (zero length) matches

   * - Examples
     - ``string_to_array('1,2,3',',')`` → [ '1', '2', '3' ]

       ``string_to_array('1,,3',',','0')`` → [ '1', '0', '3' ]


